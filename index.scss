// A base class of control element.



// development:
// @use "node_modules/@heymarco/sass-class-template/index" as *;
// @use "node_modules/@heymarco/sass-selector/index" as selector;
// @use "node_modules/@heymarco/border/index" as border;
// @use "node_modules/@heymarco/spacer/index" as spacer;
// @use "node_modules/@heymarco/typography/index" as typo;
// @use "node_modules/@heymarco/colors/index" as color;

// production:
@use "../../../node_modules/@heymarco/sass-class-template/index" as *;
@use "../../../node_modules/@heymarco/sass-selector/index" as selector;
@use "../../../node_modules/@heymarco/border/index" as border;
@use "../../../node_modules/@heymarco/spacer/index" as spacer;
@use "../../../node_modules/@heymarco/typography/index" as typo;
@use "../../../node_modules/@heymarco/colors/index" as color;



@use "sass:meta" as meta;



$alias              : "%element"                            !default;
$class              : ""                                    !default;
$var-root           : ":root"                               !default;
$var-prefix         : "elm"                                 !default;
$var-prefix-base    : ""                                    !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);
$anim-prefix: part-combine($var-prefix, "anim-");

$backg              : rgba(255, 255, 255, 0)                !default; // transp white, so the foreg color will be black
$backg-gradient     : linear-gradient(180deg, rgba(color.$white, 0.15), rgba(color.$white, 0)) border-box !default;
$color              : contrast                              !default;

$font-size          : var(#{typo.$cssvar}font-size-default) !default;
$font-size-sm       : calc((var(#{typo.$cssvar}font-size-nm) + var(#{typo.$cssvar}font-size-sm)) / 2) !default;
$font-size-lg       : var(#{typo.$cssvar}font-size-md)      !default;
$font-family        : unset                                 !default;
$font-weight        : unset                                 !default;
$font-style         : unset                                 !default;
$text-decoration    : unset                                 !default;
$lineheight         : unset                                 !default;

$padding-x          : calc((var(#{spacer.$cssvar}sm) + var(#{spacer.$cssvar}md)) / 2) !default;
$padding-y          : calc((var(#{spacer.$cssvar}xs) + var(#{spacer.$cssvar}sm)) / 2) !default;
$padding-x-sm       : var(#{spacer.$cssvar}sm)              !default;
$padding-y-sm       : var(#{spacer.$cssvar}xs)              !default;
$padding-x-lg       : var(#{spacer.$cssvar}md)              !default;
$padding-y-lg       : var(#{spacer.$cssvar}sm)              !default;

$border             : var(#{border.$cssvar}default) var(#{border.$cssvar}style) var(#{border.$cssvar}color) !default;
$border-radius      : var(#{border.$radius-cssvar}default)  !default;
$border-radius-sm   : var(#{border.$radius-cssvar}sm)       !default;
$border-radius-lg   : var(#{border.$radius-cssvar}lg)       !default;

$filter             : brightness(100%)                      !default;
$filter-hover       : brightness(55%)                       !default;

$anim               : #{$anim-prefix}none                   !default;
$anim-hover         : 150ms ease-out both #{$anim-prefix}hover  !default;
$anim-leave         : 300ms ease-out both #{$anim-prefix}leave  !default;



@include declare-cssvar($var-root) {
    // background:
    $_backg-has-color           : false;
    @if (meta.type-of($backg) == color) {
        $_backg-has-color       : true;

        #{$cssvar}backg-h       : color.hue($backg)         / 1deg;
        #{$cssvar}backg-s       : color.saturation($backg)  / 100%;
        #{$cssvar}backg-l       : color.lightness($backg)   / 100%;
        #{$cssvar}backg-a       : color.alpha($backg);

        @include color.cssvar-rgb($cssvar: $cssvar, $name: "backg", $suffix: "");
        @include color.cssvar-luminance($cssvar: $cssvar, $name: "backg", $suffix: "");

        #{$cssvar}backg         : #{color.cssvar-hsla($cssvar: $cssvar, $name: "backg", $suffix: "")};
    }
    @else {
        #{$cssvar}backg         : $backg;
    }

    #{$cssvar}backg-gradient    : $backg-gradient;

    // color:
    @if (($color == contrast) and $_backg-has-color) {
        #{$cssvar}color-h       : var(#{$cssvar}backg-h);
        #{$cssvar}color-s       : var(#{$cssvar}backg-s);
        #{$cssvar}color-l       : #{color.cssvar-contrast-l($cssvar: $cssvar, $name: "backg", $suffix: "")};
        #{$cssvar}color-a       : 1;

        #{$cssvar}color         : #{color.cssvar-hsla($cssvar: $cssvar, $name: "color", $suffix: "")};
    }
    @else if (meta.type-of($color) == color) {
        #{$cssvar}color-h       : color.hue($color)         / 1deg;
        #{$cssvar}color-s       : color.saturation($color)  / 100%;
        #{$cssvar}color-l       : color.lightness($color)   / 100%;
        #{$cssvar}color-a       : color.alpha($color);

        #{$cssvar}color         : #{color.cssvar-hsla($cssvar: $cssvar, $name: "color", $suffix: "")};
    }
    @else {
        #{$cssvar}color         : $color;
    }

    #{$cssvar}font-size         : $font-size;
    #{$cssvar}font-size-sm      : $font-size-sm;
    #{$cssvar}font-size-lg      : $font-size-lg;
    #{$cssvar}font-family       : $font-family;
    #{$cssvar}font-weight       : $font-weight;
    #{$cssvar}font-style        : $font-style;
    #{$cssvar}text-decoration   : $text-decoration;
    #{$cssvar}lineheight        : $lineheight;

    #{$cssvar}padding-x         : $padding-x;
    #{$cssvar}padding-y         : $padding-y;
    #{$cssvar}padding-x-sm      : $padding-x-sm;
    #{$cssvar}padding-y-sm      : $padding-y-sm;
    #{$cssvar}padding-x-lg      : $padding-x-lg;
    #{$cssvar}padding-y-lg      : $padding-y-lg;
    
    #{$cssvar}border            : $border;
    #{$cssvar}border-radius     : $border-radius;
    #{$cssvar}border-radius-sm  : $border-radius-sm;
    #{$cssvar}border-radius-lg  : $border-radius-lg;

    #{$cssvar}filter            : $filter;
    #{$cssvar}filter-hover      : $filter-hover;

    #{$cssvar}anim              : $anim;
    #{$cssvar}anim-hover        : $anim-hover;
    #{$cssvar}anim-leave        : $anim-leave;



    // variant-theme: background, color, border:
    @each $theme-name, $theme-color in color.$themes {
        // background:
        #{$cssvar}backg-#{$theme-name}-h        : color.hue($theme-color)           / 1deg;
        #{$cssvar}backg-#{$theme-name}-s        : color.saturation($theme-color)    / 100%;
        #{$cssvar}backg-#{$theme-name}-l        : color.lightness($theme-color)     / 100%;
        #{$cssvar}backg-#{$theme-name}-a        : color.alpha($theme-color);

        @include color.cssvar-rgb($cssvar: $cssvar, $name: "backg", $suffix: $theme-name);
        @include color.cssvar-luminance($cssvar: $cssvar, $name: "backg", $suffix: $theme-name);

        #{$cssvar}backg-#{$theme-name}          : #{color.cssvar-hsla($cssvar: $cssvar, $name: "backg", $suffix: $theme-name)};

        
        // color:
        @if (($color == contrast)) {
            #{$cssvar}color-#{$theme-name}-h    : var(#{$cssvar}backg-#{$theme-name}-h);
            #{$cssvar}color-#{$theme-name}-s    : var(#{$cssvar}backg-#{$theme-name}-s);
            #{$cssvar}color-#{$theme-name}-l    : #{color.cssvar-contrast-l($cssvar: $cssvar, $name: "backg", $suffix: $theme-name)};
            #{$cssvar}color-#{$theme-name}-a    : 1;

            #{$cssvar}color-#{$theme-name}      : #{color.cssvar-hsla($cssvar: $cssvar, $name: "color", $suffix: $theme-name)};
        }
        @else if (meta.type-of($color) == color) {
            #{$cssvar}color-#{$theme-name}-h    : var(#{$cssvar}color-h);
            #{$cssvar}color-#{$theme-name}-s    : var(#{$cssvar}color-s);
            #{$cssvar}color-#{$theme-name}-l    : var(#{$cssvar}color-l);
            #{$cssvar}color-#{$theme-name}-a    : var(#{$cssvar}color-a);
    
            #{$cssvar}color-#{$theme-name}      : #{color.cssvar-hsla($cssvar: $cssvar, $name: "color", $suffix: $theme-name)};
        }
        @else {
            #{$cssvar}color-#{$theme-name}      : var(#{$cssvar}color);
        }
    }
}



/* begin: animations */
@keyframes #{$anim-prefix}none { }

@keyframes #{$anim-prefix}hover {
    0% {
        filter  : var(#{$cssvar}filter);
    }

    100% {
        filter  : var(#{$cssvar}filter) var(#{$cssvar}filter-hover);
    }
}

@keyframes #{$anim-prefix}leave {
    0% {
        filter  : var(#{$cssvar}filter) var(#{$cssvar}filter-hover);
    }

    100% {
        filter  : var(#{$cssvar}filter);
    }
}
/* end: animations */



/* begin: states */
$_state-hover: ":hover, :focus";
$_state-leave: ".leave, .blur";
@mixin state-hover {
    @include selector.append(    $_state-hover) {
        @content;
    }
}
@mixin state-leave {
    @include selector.append-not($_state-hover) { @include selector.append($_state-leave) {
        @content;
    }}
}


$_state-disabled: ":disabled";
$_state-enabled : ".enabled";
@mixin state-disabled {
    @include selector.append(    $_state-disabled) {
        @content;
    }
}
@mixin state-not-disabled {
    @include selector.append-not($_state-disabled) {
        @content;
    }
}
@mixin state-enabled {
    @include selector.append-not($_state-disabled) { @include selector.append($_state-enabled) {
        @content;
    }}
}
/* end: states */



/* begin: general style */
@mixin _style($include, $cssvar: $cssvar) {
    // @if ($include) { @include  base.style; }
    // @else          { @extend #{base.$alias} !optional; }



    background      : var(#{$cssvar}backg-gradient), var(#{$cssvar}backg);
    color           : var(#{$cssvar}color);

    font-size       : var(#{$cssvar}font-size);
    font-family     : var(#{$cssvar}font-family);
    font-weight     : var(#{$cssvar}font-weight);
    font-style      : var(#{$cssvar}font-style);
    text-decoration : var(#{$cssvar}text-decoration);
    line-height     : var(#{$cssvar}lineheight);

    padding-left    : var(#{$cssvar}padding-x);
    padding-right   : var(#{$cssvar}padding-x);
    padding-top     : var(#{$cssvar}padding-y);
    padding-bottom  : var(#{$cssvar}padding-y);

    border          : var(#{$cssvar}border);
    border-radius   : var(#{$cssvar}border-radius);

    filter          : var(#{$cssvar}filter);


    
    /* begin: variant-size: font-size, padding, border-radius */
    @each $size in (sm, lg) { @include selector.append("." + $size) {
        font-size       : var(#{$cssvar}font-size-#{$size});

        padding-left    : var(#{$cssvar}padding-x-#{$size});
        padding-right   : var(#{$cssvar}padding-x-#{$size});
        padding-top     : var(#{$cssvar}padding-y-#{$size});
        padding-bottom  : var(#{$cssvar}padding-y-#{$size});

        border-radius   : var(#{$cssvar}border-radius-#{$size});
    }}
    /* end: variant-size: font-size, padding, border-radius */


    
    /* begin: variant-theme: background, color, border */
    @each $theme-name, $theme-color in color.$themes { @include selector.append("." + $theme-name) {
        #{$cssvar}backg-h       : var(#{$cssvar}backg-#{$theme-name}-h);
        #{$cssvar}backg-s       : var(#{$cssvar}backg-#{$theme-name}-s);
        #{$cssvar}backg-l       : var(#{$cssvar}backg-#{$theme-name}-l);
        #{$cssvar}backg-a       : var(#{$cssvar}backg-#{$theme-name}-a);

        // #{$cssvar}backg-c       : var(#{$cssvar}backg-#{$theme-name}-c);
        // #{$cssvar}backg-x       : var(#{$cssvar}backg-#{$theme-name}-x);
        // #{$cssvar}backg-r       : var(#{$cssvar}backg-#{$theme-name}-r);
        // #{$cssvar}backg-g       : var(#{$cssvar}backg-#{$theme-name}-g);
        // #{$cssvar}backg-b       : var(#{$cssvar}backg-#{$theme-name}-b);

        #{$cssvar}backg-u       : var(#{$cssvar}backg-#{$theme-name}-u);

        #{$cssvar}backg         : var(#{$cssvar}backg-#{$theme-name});



        #{$cssvar}color-h       : var(#{$cssvar}color-#{$theme-name}-h);
        #{$cssvar}color-s       : var(#{$cssvar}color-#{$theme-name}-s);
        #{$cssvar}color-l       : var(#{$cssvar}color-#{$theme-name}-l);
        #{$cssvar}color-a       : var(#{$cssvar}color-#{$theme-name}-a);

        #{$cssvar}color         : var(#{$cssvar}color-#{$theme-name});
    }}
    /* end: variant-theme: background, color, border */



    /* begin: variant-state: animation */
    #{$cssvar}anim-hover-leave  : none;
    @include state-not-disabled {
        @include state-hover { #{$cssvar}anim-hover-leave: var(#{$cssvar}anim-hover); }
        @include state-leave { #{$cssvar}anim-hover-leave: var(#{$cssvar}anim-leave); }
    }



    animation: var(#{$cssvar}anim), var(#{$cssvar}anim-hover-leave);
    /* end: variant-state: animation */
}
@mixin style($cssvar: $cssvar) {
    @include _style(true, $cssvar);
}
@include alias($alias) {
    @include _style(false);
}
/* end: general style */



// abstract class => no emit class
// @include class($alias, $class, "");